#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Dec 19 12:07:36 2018

@author: Florian Krempl

Capstone Project: Predicting Transit time with Machine Learning
Partner Company: DAMCO/Maersk

"""

import os
import numpy as np
import pandas as pd
import datetime

os.chdir('/media/shareddata/MIT/Capstone')
os.getcwd()

customer_clean = pd.DataFrame({'Shipper':[], 'Carrier':[],
                                'Original Port Of Loading':[],
                                'Original Port Of Loading Site':[],
                                'Final Port Of Discharge':[],
                                'Final Port Of Discharge Site':[],
                                'Origin Service':[], 
                                'Book Date':[], 'Expected Receipt Date':[], 
                                'Gate In Origin-Actual':[], 'Consolidation Date':[],
                                'ETD':[], 'ATD':[],'ETA':[], 'ATA':[],
                                'Container Unload From Vessel-Actual':[],
                                'Equipment Number':[]})

column_names = ['PO Line Uploaded', 'POH Client Date', 'POH Upload Date',
                'Book Date', 'Receipt Date', 'Consolidation Date',
                'ETD', 'ETA', 'ATD', 'ATA', 'Consignee',
                'PO Number', 'Origin Service', 'Destination Service', 'Consignee.1',
                'Carrier', 'VOCC Carrier', 'Carrier SCAC', 'CBL Number',
                'Booking Number', 'Shipper', 'Supplier', 'Buyer', 'Seller',
                'Original Port Of Loading', 'Original Port Of Loading Site',
                'Final Port Of Discharge', 'Final Port Of Discharge Site',
                'Actual Measurement', 'Earliest Receipt Date', 'Expected Receipt Date',
                'Latest Receipt Date', 'Actual Receipt Date',
                'Empty Equipment Dispatch-Actual', 'Gate In Origin-Actual',
                'Container Loaded On Vessel-Actual', 'Consolidation Date.1',
                'Container Unload From Vessel-Actual', 'Gate Out Destination-Actual',
                'Container Empty Return-Actual', 'Equipment Number',
                'Confirmation Date']

customers = ['USWA', 'USAD', 'USNI', 'USHO', 'USTA',
             'USDO', 'USCL', 'USHA', 'USHE']
# customer_name = 'USTE' does not work
#customer = pd.read_csv('data/Capstone Project data/USHE.csv', encoding= 'latin1')
#customer[customer['Expected Receipt Date'].notna()]

for customer_name in customers:
    # load csv files
    print("start to load", customer_name, "...") 
    customer = pd.read_csv('data/Capstone Project data/' + customer_name +'.csv', encoding= 'latin1')
    print("loaded", customer_name, "starting to clean the dataframe")
    # test for unnecessary columns
    if customer.columns[0] == 'Unnamed: 0':
        customer = customer.drop(columns='Unnamed: 0')
        print('droped unnecessary index column')
    # get right column names    
    customer.columns = column_names
    # get real carrier
    customer["Carrier"] = np.where(customer['VOCC Carrier'].isna,
            customer["CBL Number"],    #"Carrier SCAC"
            customer["VOCC Carrier"])
    # get rid of missing data - select right columns
    customer = (customer.loc[customer['Final Port Of Discharge Site'] == 'UNITED STATES']
                        .loc[customer['ETD'].notna()]
                        .loc[customer['Gate In Origin-Actual'].notna()]
                        .loc[customer['Container Unload From Vessel-Actual'].notna()]
                        .loc[:,['Shipper', 'Carrier',
                                'Original Port Of Loading',
                                'Original Port Of Loading Site',
                                'Final Port Of Discharge',
                                'Final Port Of Discharge Site',
                                'Origin Service', 
                                'Book Date', 'Expected Receipt Date', 
                                'Gate In Origin-Actual', 'Consolidation Date',
                                'ETD', 'ATD','ETA', 'ATA',
                                'Container Unload From Vessel-Actual',
                                'Equipment Number']])
    
    customer['customer'] = customer_name
    customer['Final Port Of Discharge'] = customer['Final Port Of Discharge'].str.title()
    # append to customer_clean
    print("appending", customer_name, "to customer_clean", "\n") 
    customer_clean = customer_clean.append(customer)

# get date to right format
date_columns = ['Gate In Origin-Actual',
                'Container Unload From Vessel-Actual',
                'ETD', 'Expected Receipt Date',
                'ATA']

customer_clean[date_columns] = customer_clean[date_columns].replace('-', '/', regex = True)

for column in date_columns:
    customer_clean[column] = pd.to_datetime(customer_clean[column], format =  '%d/%m/%Y')
    print(['finished converting column', column, 'to date'])

# get y column
customer_clean['y'] = customer_clean['Container Unload From Vessel-Actual']-customer_clean['Gate In Origin-Actual']
customer_clean['y'] = customer_clean['y'].dt.days

# get weekday of planned departure
customer_clean['weekday'] = customer_clean['ETD'].dt.weekday

# get day of year of arrival date
customer_clean['doy'] = customer_clean['ATA'].dt.dayofyear

# get consignment columns
customer_clean['consignment'] = np.where(customer_clean['Origin Service'] == 'CFS', 1, 0)


######################
## load statistics  ##
######################

# load port of origin statistics
port_origin = pd.read_csv('data/statistics/summary_port_of_origin.csv',
                          sep = ',', encoding= 'latin1')
port_origin = port_origin[['Shipper','Original Port Of Loading','std','median']]
port_origin.columns = ['Shipper','Original Port Of Loading','std_po','median_po']

# load chinese new year dates
chinese_holidays = pd.read_csv('data/statistics/chinese_holidays_complete.csv',
                               sep = ',', encoding= 'latin1')
chinese_holidays['date'] = pd.to_datetime(chinese_holidays['date'])

# load route carrier statistics
route = pd.read_csv('data/statistics/summary_route_carrier.csv',
                    sep = ',', encoding = 'latin1')
route = route[['Carrier', 'Original Port Of Loading', 'Final Port Of Discharge',
               'std', 'median']]
route.columns = ['Carrier', 'Original Port Of Loading', 'Final Port Of Discharge',
                 'std_route', 'median_route']

# load carrier schedule statistics
route_schedule = pd.read_csv('data/statistics/summary_route_carrier_schedule.csv',
                             sep = ',', encoding='latin1')
route_schedule = route_schedule[['Carrier', 'Original Port Of Loading',
                                 'Final Port Of Discharge', 'weekday', 'mean_schedule']]

# load port of destination carrier statistics
port_dest = pd.read_csv('data/statistics/summary_port_of_destination.csv',
                        sep = ',', encoding='latin1')
port_dest = port_dest[['customer', 'Carrier', 'Final Port Of Discharge',
                       'std_port_carrier', 'median']]
port_dest.columns = ['customer', 'Carrier', 'Final Port Of Discharge',
                     'std_pd', 'median_pd',]

# load us port capacity statistics
port_cap = pd.read_csv('data/statistics/summary_ports_us.csv',
                       sep = ',', encoding='latin1')
port_cap = port_cap[['City', 'year', 'Arrival Date', 'cap']]
port_cap['Arrival Date'] = pd.to_datetime(port_cap['Arrival Date'], format = '%d.%m.%Y')

port_cap.index = port_cap['Arrival Date'].dt.dayofyear

port_cap = (port_cap.groupby(['City', 'year'])['cap']
                    .rolling(3, center = True, min_periods = 1).mean())
port_cap = port_cap.reset_index()
port_cap.columns = ['City', 'year', 'doy', 'cap']
port_cap = port_cap.groupby(['City', 'doy'])['cap'].mean()
port_cap = port_cap.reset_index()

###############
## merge dfs ##
###############

customer_clean = (customer_clean.merge(port_origin,
                                      on = ['Shipper','Original Port Of Loading'],
                                      how = 'inner')
                                .merge(port_dest, 
                                       on = ['customer', 'Carrier', 'Final Port Of Discharge'],
                                       how = 'inner')
                                .merge(route,
                                       on = ['Carrier', 'Original Port Of Loading', 'Final Port Of Discharge'],
                                       how = 'left')
                                .merge(route_schedule,
                                       on = ['Carrier', 'Original Port Of Loading',
                                             'Final Port Of Discharge', 'weekday'],
                                       how = 'left',)
                                .merge(port_cap, 
                                       left_on = ['Final Port Of Discharge', 'doy'],
                                       right_on = ['City', 'doy'],
                                       how = 'left'))

customer_clean['holiday'] = np.where(np.isin(customer_clean['ETD'], chinese_holidays['date']), 1, 0)

view = customer_clean.head(50)

