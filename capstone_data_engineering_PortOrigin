#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 16 12:03:24 2018

@author: Florian Krempl
"""

import os
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

os.chdir('/media/shareddata/MIT/Capstone')
os.getcwd()

# customer = pd.read_csv('data/data2.csv')

#customer = pd.read_csv('data/Capstone Project data/USWA Oct15-Sept18_new.csv')
customer = pd.read_csv('data/Capstone Project data/USTA Oct15-Sept18.csv')

# clean data
# get rid of missing data - select right columns

customer_clean = (customer.loc[customer['Gate In Origin-Actual'].notna()]
                          .loc[customer['Consolidation Date'].notna()]
                          .loc[customer['Actual Receipt Date'].notna()]
                          .loc[customer['Latest Receipt Date'].notna()]
                          .loc[customer['ETD'].notna()]
                          .loc[customer['ATD'].notna()]
                          .loc[:,['Shipper', 'Original Port Of Loading',
                                 'Origin Service',
                                 'Gate In Origin-Actual','Consolidation Date', 
                                 'Actual Receipt Date', 'Latest Receipt Date', 
                                 'ETD', 'ATD']])

# get date to right format

date_columns = ['Gate In Origin-Actual', 'Consolidation Date', 
                'Actual Receipt Date', 'Latest Receipt Date', 
                'ETD', 'ATD']

customer_clean[date_columns] = customer_clean[date_columns].replace('-', '/', regex = True)

for column in date_columns:
    customer_clean[column] = pd.to_datetime(customer_clean[column], format =  '%d/%m/%Y')
    print(['finished converting column', column, 'to date'])

# get dummies
customer_clean['y'] = customer_clean['ATD']-customer_clean['Gate In Origin-Actual']
customer_clean['y'] = customer_clean['y'].dt.days

customer_clean['Origin Service'] = np.where(customer_clean['Origin Service'] == 'CFS', 1, 0)

#customer_clean['Consolidation Date'] = customer_clean['Consolidation Date'] - customer_clean['Gate In Origin-Actual']
#customer_clean['Consolidation Date'] = customer_clean['Consolidation Date'].dt.days
#customer_clean['Consolidation Date'] = np.where(customer_clean['Origin Service'] == 0, 0, customer_clean['Consolidation Date'])
#customer_clean['Consolidation Date'] = np.where(customer_clean['Consolidation Date'] < 0, 0, customer_clean['Consolidation Date'])
#
#customer_clean['Latest Receipt Date'] = customer_clean['Latest Receipt Date'] - customer_clean['Actual Receipt Date']
#customer_clean['Latest Receipt Date'] = customer_clean['Latest Receipt Date'].dt.days
#customer_clean['receipt too late'] = np.where(customer_clean['Latest Receipt Date'] > 0, 0, abs(customer_clean['Latest Receipt Date']))
#
#customer_clean['Actual Receipt Date'] = customer_clean['Actual Receipt Date'] - customer_clean['Gate In Origin-Actual']
#customer_clean['Actual Receipt Date'] = customer_clean['Actual Receipt Date'].dt.days
#
#customer_clean['ETD'] = customer_clean['ETD'] - customer_clean['Gate In Origin-Actual']
#customer_clean['ETD'] = customer_clean['ETD'].dt.days

summary = (customer_clean.groupby(['Shipper',
                                  'Original Port Of Loading'])['y']
    .agg([np.mean, np.std, np.median, np.count_nonzero]))

summary = summary.reset_index()

customer_clean = customer_clean.loc[:, ['Shipper',
                                        'Original Port Of Loading',
                                        'Gate In Origin-Actual',
                                        'Origin Service',
                                        'y']]

customer_clean = customer_clean.merge(summary,
                                      on = ['Shipper',
                                            'Original Port Of Loading'],
                                      how = 'inner')
    
customer_clean = customer_clean[customer_clean['count_nonzero'] > 100]


