#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct 30 19:13:43 2018

@author: drx
"""

import os
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor 
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split




os.chdir('/media/shareddata/MIT/Capstone')
os.getcwd()


#######################################################################
## get valid routes 
######################################################################

tryhard = customer_clean.set_index(["Carrier",
                          'Original Port Of Loading',
                          'Final Port Of Discharge'])

for i in range(0,len(tryhard)):
    print(tryhard.index[i] in valid_routes)

tryhard.loc[tryhard.index.isin(valid_routes)]



###############################################################
#random forest
X = ['']

X_train, X_test, y_train, y_test = train_test_split(customer_clean[X],
                                                    customer_clean['y'],
                                                    test_size=0.35,
                                                    random_state=1992)

regr = RandomForestRegressor(n_estimators = 10,
                             criterion = 'mae',
                             random_state = 1992,
                             )
regr.fit(X_train, y_train)

feature_importance = pd.DataFrame(X_train.columns,
                                  regr.feature_importances_)
feature_importance

y_hat = regr.predict(X_test)





see.plot.hist(grid=True, bins=10, rwidth=0.9, color='#607c8e')


              
              


"""
    see milestones - not in real skript
    
"""



#calculations
#for column in date_columns:
#    print([column, (customer[column][5] - customer['Earliest Receipt Date'][5]).days])
#
#customer['ATA'][0] - customer['Receipt Date'][0]


# get milestone order
dates = customer_clean[date_columns]
milestone = dates[15:17].transpose().reset_index().copy()
milestone.columns = ['names', 'row1', 'row2']

milestone = milestone.sort_values(by=['row1'])

milestone
#write excel
writer = pd.ExcelWriter('milestones2.xlsx')
milestone.to_excel(writer, 'sheet1')
writer.save()


milestone


